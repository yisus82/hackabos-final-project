'use strict';

const express = require('express');
const bodyParser = require('body-parser');
const routes = require('./routes');

const app = express();
let server = null;

app.use(bodyParser.json());

/**
 * Add response headers
 */
app.use((req, res, next) => {
  const accessControlAllowMethods = ['GET', 'POST', 'OPTIONS', 'PUT', 'DELETE'];

  const accessControlAllowHeaders = [
    'Authorization',
    'Origin',
    'X - Requested - With',
    'Content - Type',
    'Accept',
    'Access - Control - Allow - Request - Method',
    'x - market',
  ];

  res.setHeader('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Credentials', 'true');
  res.header('Access-Control-Allow-Methods', accessControlAllowMethods.join(','));
  res.header('Access-Control-Allow-Headers', accessControlAllowHeaders.join(','));
  next();
});

/**
 * Add all routes
 */
app.use('/users', routes.userRouter);
app.use('*', (req, res) => res.status(404).send());

/**
 * Special route middleware to catch all next(err) generated by controllers
 */
app.use((err, req, res) => {
  if (err.name === 'MediAddicted') {
    const { status, errors } = err;
    return res.status(status).json(errors);
  }
  console.error('Error 500', err);
  return res.status(500).json({
    message: err.message,
  });
});

/**
 * Start listening requests at a given port on a host
 * @param {Number} port
 * @param {String} host
 */
async function listen(port, host) {
  if (server === null) {
    server = await app.listen(port, host);
  } else {
    console.error("Can't listen, server already initialized");
  }
}

/**
 * Stop listening requests
 */
async function close() {
  if (server) {
    await server.close();
    server = null;
  } else {
    console.error("Can't close a non started server");
  }
}

module.exports = {
  listen,
  close,
};
